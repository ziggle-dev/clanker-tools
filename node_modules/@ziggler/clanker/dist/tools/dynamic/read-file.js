import React from "react";
import { Text } from "ink";
import * as fs from "fs/promises";
import * as path from "path";
import { createTool, ToolCategory, ToolCapability } from "../../registry";
import { CompactOutput } from "../../ui/components/tool-output";
import { fileTrackerActions } from "../../store/store";
const MAX_TOKENS = 25e3;
const CHARS_PER_TOKEN = 4;
const MAX_CHARS = MAX_TOKENS * CHARS_PER_TOKEN;
const readFileTool = createTool().id("read_file").name("Read Entire File").description(`Read an entire file to prepare for editing (max ${MAX_TOKENS.toLocaleString()} tokens). This tool must be used before any file editing operations.`).category(ToolCategory.FileSystem).capabilities(ToolCapability.FileRead).tags("file", "read", "full", "edit", "prepare").stringArg("path", "Path to the file to read", { required: true }).examples([
  {
    description: "Read a file before editing",
    arguments: { path: "src/index.ts" },
    result: "File read and tracked for editing"
  }
]).execute(async (args, context) => {
  const { path: filePath } = args;
  context.logger?.debug(`Reading entire file: ${filePath}`);
  try {
    const stats = await fs.stat(filePath);
    if (stats.isDirectory()) {
      context.logger?.error(`Path is a directory, not a file: ${filePath}`);
      return {
        success: false,
        error: `Cannot read directory: ${filePath}. This tool is for files only.`
      };
    }
    const fileSize = stats.size;
    const estimatedTokens = Math.ceil(fileSize / CHARS_PER_TOKEN);
    if (fileSize > MAX_CHARS) {
      const lines2 = (await fs.readFile(filePath, "utf8")).split("\n").length;
      context.logger?.error(`File too large: ${filePath} (${estimatedTokens} tokens)`);
      return {
        success: false,
        error: `File too large: ${estimatedTokens.toLocaleString()} tokens (max: ${MAX_TOKENS.toLocaleString()} tokens). Use view_file with start_line and end_line arguments to read specific sections. File has ${lines2.toLocaleString()} total lines.`
      };
    }
    const content = await fs.readFile(filePath, "utf8");
    const lines = content.split("\n");
    const totalLines = lines.length;
    fileTrackerActions.updateFile(filePath, content);
    context.logger?.info(`Read entire file: ${filePath} (${totalLines} lines, ~${estimatedTokens} tokens)`);
    return {
      success: true,
      output: `Successfully read ${filePath}`,
      data: {
        filePath,
        totalLines,
        sizeInBytes: content.length,
        estimatedTokens
      }
    };
  } catch (error) {
    context.logger?.error(`Failed to read ${filePath}: ${error instanceof Error ? error.message : String(error)}`);
    return {
      success: false,
      error: `Failed to read ${filePath}: ${error instanceof Error ? error.message : String(error)}`
    };
  }
}).renderResult(({ isExecuting, result, arguments: args }) => {
  if (isExecuting) {
    return /* @__PURE__ */ React.createElement(CompactOutput, null, /* @__PURE__ */ React.createElement(Text, { color: "cyan" }, " Reading file..."));
  }
  if (!result || !result.success) {
    return /* @__PURE__ */ React.createElement(CompactOutput, null, /* @__PURE__ */ React.createElement(Text, { color: "red" }, " ", result?.error || "Failed to read file"));
  }
  const data = result.data;
  const filePath = data?.filePath || args.path;
  const totalLines = data?.totalLines || 0;
  return /* @__PURE__ */ React.createElement(CompactOutput, null, /* @__PURE__ */ React.createElement(Text, { color: "green" }, " Read ", path.basename(filePath), " (", totalLines, " lines)"));
}).build();
var read_file_default = readFileTool;
export {
  read_file_default as default
};
