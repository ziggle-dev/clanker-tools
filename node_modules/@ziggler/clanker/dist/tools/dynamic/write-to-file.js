import React from "react";
import { Text, Box } from "ink";
import * as fs from "fs/promises";
import * as path from "path";
import { createTool, ToolCategory, ToolCapability } from "../../registry";
import { ConfirmationService } from "../../utils/confirmation-service";
import { CompactOutput, ToolOutput } from "../../ui/components/tool-output";
import { fileTrackerActions } from "../../store/store";
let confirmationService;
const writeToFileTool = createTool().id("write_to_file").name("Write to File").description("Write complete content to a file (create new or overwrite existing)").category(ToolCategory.FileSystem).capabilities(ToolCapability.FileWrite, ToolCapability.UserConfirmation).tags("file", "write", "create", "overwrite").stringArg("path", "Path where the file should be written", { required: true }).stringArg("content", "Complete content to write to the file", { required: true }).booleanArg("create_only", "Fail if file already exists (default: false)", { default: false }).examples([
  {
    description: "Create a new file",
    arguments: {
      path: "src/hello.ts",
      content: "console.log('Hello, world!');"
    },
    result: "Creates hello.ts with the provided content"
  },
  {
    description: "Overwrite existing file",
    arguments: {
      path: "README.md",
      content: "# New Content\nThis replaces the entire file."
    },
    result: "Overwrites README.md with new content"
  },
  {
    description: "Create only (fail if exists)",
    arguments: {
      path: "config.json",
      content: "{}",
      create_only: true
    },
    result: "Creates config.json only if it doesn't exist"
  }
]).onInitialize(async (context) => {
  confirmationService = ConfirmationService.getInstance();
  context.logger?.debug("Write to File tool initialized");
}).execute(async (args, context) => {
  const { path: filePath, content, create_only } = args;
  context.logger?.debug(`Writing to file: ${filePath}`);
  context.logger?.debug(`Content length: ${content.length} bytes`);
  context.logger?.debug(`Create only: ${create_only}`);
  try {
    let fileExists = false;
    let existingContent = "";
    try {
      existingContent = await fs.readFile(filePath, "utf8");
      fileExists = true;
    } catch {
      fileExists = false;
    }
    if (create_only && fileExists) {
      context.logger?.warn(`File ${filePath} already exists (create_only=true)`);
      return {
        success: false,
        error: `File already exists: ${filePath}. Set create_only to false to overwrite.`
      };
    }
    const sessionFlags = confirmationService.getSessionFlags();
    if (!sessionFlags.createFiles && !sessionFlags.allOperations) {
      const operation = fileExists ? "Overwrite file" : "Create file";
      const warningMessage = fileExists ? `WARNING: This will OVERWRITE the existing file!

Existing content (first 500 chars):
${existingContent.slice(0, 500)}${existingContent.length > 500 ? "..." : ""}

` : "";
      const confirmationResult = await confirmationService.requestConfirmation({
        operation,
        filename: filePath,
        content: `${warningMessage}New content (first 500 chars):
${content.slice(0, 500)}${content.length > 500 ? "..." : ""}`
      }, "file_create");
      if (!confirmationResult.confirmed) {
        context.logger?.info(`File write cancelled by user`);
        return {
          success: false,
          error: confirmationResult.feedback || "File write cancelled by user"
        };
      }
    }
    const dir = path.dirname(filePath);
    await fs.mkdir(dir, { recursive: true });
    await fs.writeFile(filePath, content, "utf8");
    fileTrackerActions.updateFile(filePath, content);
    const message = fileExists ? `Successfully overwrote file: ${filePath}` : `Successfully created file: ${filePath}`;
    context.logger?.info(message);
    return {
      success: true,
      output: message,
      data: {
        filePath,
        fileExists,
        contentLength: content.length,
        lines: content.split("\n").length
      }
    };
  } catch (error) {
    context.logger?.error(`Failed to write file: ${error instanceof Error ? error.message : String(error)}`);
    return {
      success: false,
      error: `Failed to write file: ${error instanceof Error ? error.message : String(error)}`
    };
  }
}).renderResult(({ isExecuting, result, arguments: args }) => {
  if (isExecuting) {
    return /* @__PURE__ */ React.createElement(CompactOutput, null, /* @__PURE__ */ React.createElement(Text, { color: "cyan" }, " Writing file..."));
  }
  if (!result || !result.success) {
    return /* @__PURE__ */ React.createElement(CompactOutput, null, /* @__PURE__ */ React.createElement(Text, { color: "red" }, " ", result?.error || "Failed to write file"));
  }
  const data = result.data;
  const filePath = data?.filePath || args.path;
  const action = data?.fileExists ? "Overwrote" : "Created";
  return /* @__PURE__ */ React.createElement(ToolOutput, null, /* @__PURE__ */ React.createElement(Box, { flexDirection: "column" }, /* @__PURE__ */ React.createElement(Box, null, /* @__PURE__ */ React.createElement(Text, { color: "green" }, "\u2713 ", action, " "), /* @__PURE__ */ React.createElement(Text, { color: "cyan", bold: true }, path.basename(filePath)), /* @__PURE__ */ React.createElement(Text, { color: "gray" }, " in "), /* @__PURE__ */ React.createElement(Text, { color: "gray", dimColor: true }, path.dirname(filePath), "/")), data?.lines && /* @__PURE__ */ React.createElement(Text, { color: "gray", dimColor: true }, data.lines, " lines \u2022 ", data.contentLength, " bytes")));
}).build();
var write_to_file_default = writeToFileTool;
export {
  write_to_file_default as default
};
