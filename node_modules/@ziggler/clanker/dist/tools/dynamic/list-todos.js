import React from "react";
import { Box, Text } from "ink";
import { createTool, ToolCategory } from "../../registry";
import { ToolOutput, CompactOutput } from "../../ui/components/tool-output";
import { todoList } from "./create-todo-list";
function generateTodoSummary() {
  if (todoList.length === 0) {
    return "No todos";
  }
  const byStatus = {
    pending: todoList.filter((t) => t.status === "pending"),
    in_progress: todoList.filter((t) => t.status === "in_progress"),
    completed: todoList.filter((t) => t.status === "completed")
  };
  const lines = [];
  const urgent = [...byStatus.pending, ...byStatus.in_progress].filter((t) => t.priority === "high").sort((a, b) => {
    if (a.status === "in_progress" && b.status !== "in_progress") return -1;
    if (a.status !== "in_progress" && b.status === "in_progress") return 1;
    return 0;
  });
  if (urgent.length > 0) {
    lines.push("\u{1F534} High Priority:");
    urgent.forEach((todo) => {
      const statusIcon = todo.status === "in_progress" ? "\u{1F504}" : "\u23F3";
      lines.push(`  ${statusIcon} [${todo.id}] ${todo.content}`);
    });
    lines.push("");
  }
  const other = [...byStatus.pending, ...byStatus.in_progress].filter((t) => t.priority !== "high").sort((a, b) => {
    if (a.priority === "medium" && b.priority === "low") return -1;
    if (a.priority === "low" && b.priority === "medium") return 1;
    if (a.status === "in_progress" && b.status !== "in_progress") return -1;
    if (a.status !== "in_progress" && b.status === "in_progress") return 1;
    return 0;
  });
  if (other.length > 0) {
    lines.push("\u{1F4CB} Other Tasks:");
    other.forEach((todo) => {
      const statusIcon = todo.status === "in_progress" ? "\u{1F504}" : "\u23F3";
      const priorityIcon = todo.priority === "medium" ? "\u{1F7E1}" : "\u{1F7E2}";
      lines.push(`  ${statusIcon} ${priorityIcon} [${todo.id}] ${todo.content}`);
    });
    lines.push("");
  }
  if (byStatus.completed.length > 0) {
    lines.push(`\u2705 Completed (${byStatus.completed.length}):`);
    byStatus.completed.slice(0, 5).forEach((todo) => {
      lines.push(`  \u2713 [${todo.id}] ${todo.content}`);
    });
    if (byStatus.completed.length > 5) {
      lines.push(`  ... and ${byStatus.completed.length - 5} more`);
    }
  }
  lines.push("");
  lines.push(`Total: ${todoList.length} | Pending: ${byStatus.pending.length} | In Progress: ${byStatus.in_progress.length} | Completed: ${byStatus.completed.length}`);
  return lines.join("\n");
}
const renderTodoList = ({
  toolName,
  arguments: args,
  result,
  isExecuting
}) => {
  if (isExecuting) {
    return /* @__PURE__ */ React.createElement(CompactOutput, null, /* @__PURE__ */ React.createElement(Text, { color: "cyan" }, " Loading todo list..."));
  }
  if (!result || !result.success) {
    return /* @__PURE__ */ React.createElement(CompactOutput, null, /* @__PURE__ */ React.createElement(Text, { color: "red" }, " Error: ", result?.error || "Unknown error"));
  }
  const todos = result.data?.todos || [];
  if (todos.length === 0) {
    return /* @__PURE__ */ React.createElement(CompactOutput, null, /* @__PURE__ */ React.createElement(Text, { color: "gray" }, " No todos"));
  }
  const elements = [];
  const byStatus = {
    pending: todos.filter((t) => t.status === "pending"),
    in_progress: todos.filter((t) => t.status === "in_progress"),
    completed: todos.filter((t) => t.status === "completed")
  };
  const urgent = [...byStatus.pending, ...byStatus.in_progress].filter((t) => t.priority === "high").sort((a, b) => {
    if (a.status === "in_progress" && b.status !== "in_progress") return -1;
    if (a.status !== "in_progress" && b.status === "in_progress") return 1;
    return 0;
  });
  if (urgent.length > 0) {
    urgent.forEach((todo) => {
      elements.push(
        /* @__PURE__ */ React.createElement(Box, { key: `todo-${todo.id}` }, /* @__PURE__ */ React.createElement(Text, { color: todo.status === "in_progress" ? "cyan" : "yellow" }, todo.status === "in_progress" ? "  \u25D0 " : "  \u25CB "), /* @__PURE__ */ React.createElement(Text, { color: "white" }, todo.content), /* @__PURE__ */ React.createElement(Text, { color: "red" }, " \u25CF"))
      );
    });
  }
  const other = [...byStatus.pending, ...byStatus.in_progress].filter((t) => t.priority !== "high").sort((a, b) => {
    if (a.priority === "medium" && b.priority === "low") return -1;
    if (a.priority === "low" && b.priority === "medium") return 1;
    if (a.status === "in_progress" && b.status !== "in_progress") return -1;
    if (a.status !== "in_progress" && b.status === "in_progress") return 1;
    return 0;
  });
  if (other.length > 0) {
    other.forEach((todo) => {
      const priorityColor = todo.priority === "medium" ? "yellow" : "green";
      elements.push(
        /* @__PURE__ */ React.createElement(Box, { key: `todo-${todo.id}` }, /* @__PURE__ */ React.createElement(Text, { color: todo.status === "in_progress" ? "cyan" : "gray" }, todo.status === "in_progress" ? "  \u25D0 " : "  \u25CB "), /* @__PURE__ */ React.createElement(Text, { color: "white" }, todo.content), /* @__PURE__ */ React.createElement(Text, { color: priorityColor }, " \u25CF"))
      );
    });
  }
  if (byStatus.completed.length > 0) {
    byStatus.completed.slice(0, 3).forEach((todo) => {
      elements.push(
        /* @__PURE__ */ React.createElement(Box, { key: `todo-${todo.id}` }, /* @__PURE__ */ React.createElement(Text, { color: "green" }, "  \u25CF "), /* @__PURE__ */ React.createElement(Text, { color: "gray", dimColor: true }, todo.content))
      );
    });
    if (byStatus.completed.length > 3) {
      elements.push(
        /* @__PURE__ */ React.createElement(Box, { key: "more-completed" }, /* @__PURE__ */ React.createElement(Text, { color: "gray" }, "  ... and ", byStatus.completed.length - 3, " more completed"))
      );
    }
  }
  return /* @__PURE__ */ React.createElement(ToolOutput, null, /* @__PURE__ */ React.createElement(Box, { flexDirection: "column" }, elements));
};
const listTodosTools = createTool().id("list_todos").name("List Todos").description("List all current todos in the todo list").category(ToolCategory.Task).tags("todo", "task", "list", "view").renderResult(renderTodoList).examples([
  {
    description: "List all todos",
    arguments: {},
    result: "Current todo list with all items displayed"
  }
]).execute(async (args, context) => {
  context.logger?.debug(`Listing ${todoList.length} todo items`);
  if (todoList.length === 0) {
    return {
      success: true,
      output: "No todos in the list",
      data: { todos: [] }
    };
  }
  const summary = generateTodoSummary();
  context.logger?.info(`Listed ${todoList.length} todo items`);
  return {
    success: true,
    output: summary,
    data: { todos: todoList }
  };
}).build();
var list_todos_default = listTodosTools;
export {
  list_todos_default as default
};
