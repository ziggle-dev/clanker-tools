import React from "react";
import { Box, Text } from "ink";
import * as fs from "fs/promises";
import * as path from "path";
import { createTool, ToolCategory, ToolCapability } from "../../registry";
import { ConfirmationService } from "../../utils/confirmation-service";
const removeTool = createTool().id("remove").name("Remove Files").description("Delete one or more files (requires confirmation)").category(ToolCategory.FileSystem).capabilities(ToolCapability.FileWrite).tags("delete", "remove", "rm", "unlink", "filesystem").stringArg("path", "File path to remove (for single file)", { required: false }).arrayArg("paths", "Array of file paths to remove (for multiple files)", { required: false }).booleanArg("force", "Skip confirmation (requires dangerously bypass permission)", { default: false }).examples([
  {
    description: "Remove a single file",
    arguments: { path: "temp.txt" },
    result: "File removed: temp.txt"
  },
  {
    description: "Remove multiple files",
    arguments: { paths: ["file1.txt", "file2.txt", "file3.txt"] },
    result: "3 files removed successfully"
  }
]).renderResult(({ isExecuting, result, arguments: args }) => {
  if (isExecuting) {
    const count = args.paths?.length || 1;
    return /* @__PURE__ */ React.createElement(Text, { color: "yellow" }, "\u23BF Preparing to remove ", count, " file", count > 1 ? "s" : "", "...");
  }
  if (!result?.success) {
    return /* @__PURE__ */ React.createElement(Text, { color: "red" }, "\u23BF ", result?.error || "Failed to remove file(s)");
  }
  const data = result.data;
  if (data?.removedCount > 1) {
    return /* @__PURE__ */ React.createElement(Box, { flexDirection: "column", marginLeft: 2 }, /* @__PURE__ */ React.createElement(Text, { color: "green" }, "\u23BF Successfully removed ", data.removedCount, " files"), data.removed?.map((file, i) => /* @__PURE__ */ React.createElement(Text, { key: i, color: "gray" }, "  \u2022 ", file)));
  }
  return /* @__PURE__ */ React.createElement(Text, { color: "green" }, "\u23BF ", result.output);
}).execute(async (args, context) => {
  const { path: singlePath, paths: multiplePaths, force } = args;
  if (!singlePath && (!multiplePaths || multiplePaths.length === 0)) {
    return {
      success: false,
      error: 'Either "path" or "paths" argument is required'
    };
  }
  if (singlePath && multiplePaths) {
    return {
      success: false,
      error: 'Cannot specify both "path" and "paths" - use one or the other'
    };
  }
  const filesToRemove = singlePath ? [singlePath] : multiplePaths;
  const existingFiles = [];
  const missingFiles = [];
  for (const file of filesToRemove) {
    try {
      const absolutePath = path.isAbsolute(file) ? file : path.join(process.cwd(), file);
      const stats = await fs.stat(absolutePath);
      if (stats.isDirectory()) {
        return {
          success: false,
          error: `Cannot remove directory: ${file}. Use a different tool for directory operations.`
        };
      }
      existingFiles.push(file);
    } catch (error) {
      missingFiles.push(file);
    }
  }
  if (missingFiles.length === filesToRemove.length) {
    return {
      success: false,
      error: `No files found to remove. Missing: ${missingFiles.join(", ")}`
    };
  }
  let confirmMessage = existingFiles.length === 1 ? `Remove file: ${existingFiles[0]}?` : `Remove ${existingFiles.length} files?`;
  const fileList = existingFiles.map((f) => `\u2022 ${f}`).join("\n");
  if (!force) {
    const confirmationService = ConfirmationService.getInstance();
    const result = await confirmationService.requestConfirmation({
      operation: "file_delete",
      filename: existingFiles.length === 1 ? existingFiles[0] : `${existingFiles.length} files`,
      content: confirmMessage + "\n\nFiles to remove:\n" + fileList
    });
    if (!result.confirmed) {
      return {
        success: false,
        error: result.feedback || "Operation cancelled by user"
      };
    }
  }
  const removed = [];
  const failed = [];
  for (const file of existingFiles) {
    try {
      const absolutePath = path.isAbsolute(file) ? file : path.join(process.cwd(), file);
      await fs.unlink(absolutePath);
      removed.push(file);
      context.logger?.info(`Removed file: ${file}`);
    } catch (error) {
      failed.push(file);
      context.logger?.error(`Failed to remove ${file}: ${error}`);
    }
  }
  let warningMessage = "";
  if (missingFiles.length > 0) {
    warningMessage = `

Warning: ${missingFiles.length} file(s) not found: ${missingFiles.join(", ")}`;
  }
  if (failed.length > 0) {
    return {
      success: false,
      error: `Failed to remove ${failed.length} file(s): ${failed.join(", ")}`,
      data: {
        removed,
        failed,
        missing: missingFiles
      }
    };
  }
  const output = removed.length === 1 ? `File removed: ${removed[0]}${warningMessage}` : `${removed.length} files removed successfully${warningMessage}`;
  return {
    success: true,
    output,
    data: {
      removed,
      removedCount: removed.length,
      missing: missingFiles
    }
  };
}).build();
var remove_default = removeTool;
export {
  remove_default as default
};
